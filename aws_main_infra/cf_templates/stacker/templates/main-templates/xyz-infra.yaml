AWSTemplateFormatVersion: 2010-09-09
Description: Amazon EKS HP VPC NodeGroup
Parameters:
  EnvironmentPrefix:
    Type: String
    Default: Dev
    Description: Prefix for Env Name
  ClusterName:
    Type: String
    Description: Name Of The  EKS Cluster
  VpcBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: >-
      The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR
      range.
  Subnet01Block:
    Type: String
    Default: 192.168.1.0/24
    Description: CidrBlock for subnet 01 within the VPC
  Subnet02Block:
    Type: String
    Default: 192.168.2.0/24
    Description: CidrBlock for subnet 02 within the VPC
  Subnet03Block:
    Type: String
    Default: 192.168.3.0/24
    Description: CidrBlock for subnet 03 within the VPC
  Subnet04Block:
    Type: String
    Default: 192.168.4.0/24
    Description: CidrBlock for subnet 04 within the VPC
  Subnet05Block:
    Type: String
    Default: 192.168.5.0/24
    Description: CidrBlock for subnet 05 within the VPC
  Subnet06Block:
    Type: String
    Default: 192.168.6.0/24
    Description: CidrBlock for subnet 06 within the VPC
  BastionImageID:
    Type: String
    Default: ami-07d8c98607d0b1326
    Description: Image ID / AMI ID for Bastion Host
  BastionInstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - a1.medium
      - a1.large
      - a1.xlarge
      - a1.2xlarge
      - a1.4xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - c5.metal
      - c5d.large
      - c5d.xlarge
      - c5d.2xlarge
      - c5d.4xlarge
      - c5d.9xlarge
      - c5d.18xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - c5n.18xlarge
      - cc2.8xlarge
      - cr1.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - f1.2xlarge
      - f1.4xlarge
      - f1.16xlarge
      - g2.2xlarge
      - g2.8xlarge
      - g3s.xlarge
      - g3.4xlarge
      - g3.8xlarge
      - g3.16xlarge
      - h1.2xlarge
      - h1.4xlarge
      - h1.8xlarge
      - h1.16xlarge
      - hs1.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - i3.metal
      - i3en.large
      - i3en.xlarge
      - i3en.2xlarge
      - i3en.3xlarge
      - i3en.6xlarge
      - i3en.12xlarge
      - i3en.24xlarge
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
      - m5.metal
      - m5a.large
      - m5a.xlarge
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.8xlarge
      - m5a.12xlarge
      - m5a.16xlarge
      - m5a.24xlarge
      - m5ad.large
      - m5ad.xlarge
      - m5ad.2xlarge
      - m5ad.4xlarge
      - m5ad.12xlarge
      - m5ad.24xlarge
      - m5d.large
      - m5d.xlarge
      - m5d.2xlarge
      - m5d.4xlarge
      - m5d.8xlarge
      - m5d.12xlarge
      - m5d.16xlarge
      - m5d.24xlarge
      - m5d.metal
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
      - p3dn.24xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
      - r5.12xlarge
      - r5.16xlarge
      - r5.24xlarge
      - r5.metal
      - r5a.large
      - r5a.xlarge
      - r5a.2xlarge
      - r5a.4xlarge
      - r5a.8xlarge
      - r5a.12xlarge
      - r5a.16xlarge
      - r5a.24xlarge
      - r5ad.large
      - r5ad.xlarge
      - r5ad.2xlarge
      - r5ad.4xlarge
      - r5ad.12xlarge
      - r5ad.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.8xlarge
      - r5d.12xlarge
      - r5d.16xlarge
      - r5d.24xlarge
      - r5d.metal
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - t3a.nano
      - t3a.micro
      - t3a.small
      - t3a.medium
      - t3a.large
      - t3a.xlarge
      - t3a.2xlarge
      - u-6tb1.metal
      - u-9tb1.metal
      - u-12tb1.metal
      - x1.16xlarge
      - x1.32xlarge
      - x1e.xlarge
      - x1e.2xlarge
      - x1e.4xlarge
      - x1e.8xlarge
      - x1e.16xlarge
      - x1e.32xlarge
      - z1d.large
      - z1d.xlarge
      - z1d.2xlarge
      - z1d.3xlarge
      - z1d.6xlarge
      - z1d.12xlarge
      - z1d.metal
    ConstraintDescription: Must be a valid EC2 instance type
    Description: EC2 instance type for the bastion node instances
  BastionNodeVolumeSize:
    Type: Number
    Default: 20
    Description: Node volume size
  BootstrapArguments:
    Type: String
    Default: ""
    Description: "Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami"
  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: The EC2 Key Pair to allow SSH access to the instances
  BastionKeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: The EC2 Key Pair to allow SSH access to the instances
    Default: bastion
  BastionNodeAutoScalingGroupDesiredCapacity:
    Type: Number
    Default: 1
    Description: Desired capacity of Bastion Node Group ASG.
  BastionNodeAutoScalingGroupMaxSize:
    Type: Number
    Default: 1
    Description: Maximum size of Bastion Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.
  BastionNodeAutoScalingGroupMinSize:
    Type: Number
    Default: 1
    Description: Minimum size of Bastion Node Group ASG.
  NodeAutoScalingGroupDesiredCapacity:
    Type: Number
    Default: 3
    Description: Desired capacity of Node Group ASG.
  NodeAutoScalingGroupMaxSize:
    Type: Number
    Default: 4
    Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.
  NodeAutoScalingGroupMinSize:
    Type: Number
    Default: 2
    Description: Minimum size of Node Group ASG.
  DBAutoScalingGroupMaxSize:
    Type: Number
    Default: 4
    Description: Maximum size of DB Group ASG.
  DBAutoScalingGroupMinSize:
    Type: Number
    Default: 1
    Description: Minimum size of DB Group ASG.
  PolicyTargetValue:
    Type: String
    Default: 40
  NodeGroupName:
    Type: String
    Description: Unique identifier for the Node Group.
  NodeImageId:
    Type: String
    Default: ""
    Description: (Optional) Specify your own custom image ID. This value overrides any AWS Systems Manager Parameter Store value specified above.
  NodeImageIdSSMParam:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/eks/optimized-ami/1.18/amazon-linux-2/recommended/image_id
    Description: AWS Systems Manager Parameter Store parameter of the AMI ID for the worker node instances.
  NodeInstanceType:
    Type: String
    Default: t3.medium
    AllowedValues:
      - a1.medium
      - a1.large
      - a1.xlarge
      - a1.2xlarge
      - a1.4xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - c5.metal
      - c5d.large
      - c5d.xlarge
      - c5d.2xlarge
      - c5d.4xlarge
      - c5d.9xlarge
      - c5d.18xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - c5n.18xlarge
      - cc2.8xlarge
      - cr1.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - f1.2xlarge
      - f1.4xlarge
      - f1.16xlarge
      - g2.2xlarge
      - g2.8xlarge
      - g3s.xlarge
      - g3.4xlarge
      - g3.8xlarge
      - g3.16xlarge
      - h1.2xlarge
      - h1.4xlarge
      - h1.8xlarge
      - h1.16xlarge
      - hs1.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - i3.metal
      - i3en.large
      - i3en.xlarge
      - i3en.2xlarge
      - i3en.3xlarge
      - i3en.6xlarge
      - i3en.12xlarge
      - i3en.24xlarge
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
      - m5.metal
      - m5a.large
      - m5a.xlarge
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.8xlarge
      - m5a.12xlarge
      - m5a.16xlarge
      - m5a.24xlarge
      - m5ad.large
      - m5ad.xlarge
      - m5ad.2xlarge
      - m5ad.4xlarge
      - m5ad.12xlarge
      - m5ad.24xlarge
      - m5d.large
      - m5d.xlarge
      - m5d.2xlarge
      - m5d.4xlarge
      - m5d.8xlarge
      - m5d.12xlarge
      - m5d.16xlarge
      - m5d.24xlarge
      - m5d.metal
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
      - p3dn.24xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
      - r5.12xlarge
      - r5.16xlarge
      - r5.24xlarge
      - r5.metal
      - r5a.large
      - r5a.xlarge
      - r5a.2xlarge
      - r5a.4xlarge
      - r5a.8xlarge
      - r5a.12xlarge
      - r5a.16xlarge
      - r5a.24xlarge
      - r5ad.large
      - r5ad.xlarge
      - r5ad.2xlarge
      - r5ad.4xlarge
      - r5ad.12xlarge
      - r5ad.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.8xlarge
      - r5d.12xlarge
      - r5d.16xlarge
      - r5d.24xlarge
      - r5d.metal
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - t3a.nano
      - t3a.micro
      - t3a.small
      - t3a.medium
      - t3a.large
      - t3a.xlarge
      - t3a.2xlarge
      - u-6tb1.metal
      - u-9tb1.metal
      - u-12tb1.metal
      - x1.16xlarge
      - x1.32xlarge
      - x1e.xlarge
      - x1e.2xlarge
      - x1e.4xlarge
      - x1e.8xlarge
      - x1e.16xlarge
      - x1e.32xlarge
      - z1d.large
      - z1d.xlarge
      - z1d.2xlarge
      - z1d.3xlarge
      - z1d.6xlarge
      - z1d.12xlarge
      - z1d.metal
    ConstraintDescription: Must be a valid EC2 instance type
    Description: EC2 instance type for the node instances
  NodeVolumeSize:
    Type: Number
    Default: 20
    Description: Node volume size
  DatabaseUsername:
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must be between 1 to 16 alphanumeric characters.
    Description: The database admin account user name, between 1 to 16 alphanumeric characters.
    MaxLength: '16'
    MinLength: '1'
    Type: String
  DatabasePassword:
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must be between 8 to 41 alphanumeric characters.
    Description: The database admin account password, between 8 to 41 alphanumeric characters.
    MaxLength: '41'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  DatabaseName:
    AllowedPattern: "[a-zA-Z0-9-_]+"
    ConstraintDescription: must be between 4 to 30 alphanumeric characters.
    Description: The database admin account user name, between 4 to 30 alphanumeric characters.
    MaxLength: '30'
    MinLength: '4'
    Type: String
  InstanceType:
    Type: String
    Default: db.t2.small
    Description: Enter db Instance types.
  DBClusterIdentifier:
    Type: String
    Description: Database Cluster Name
  DatabaseReplication:
    Type: String
    AllowedValues:
      - 'Required'
      - 'Not Required'
    Default: Not Required
    Description: Do this deployment need Database Replication or Not
  FluentdSharedLogRoleARN:
    Type: String
    Description: ARN of the role created to access CW logs for Fluentd
  Route53SharedRoleARN:
    Type: String
    Description: ARN of the role created to access Route53
  RDSBackupRetentionPeriod:
    Type: Number
    Default: 7
    Description: Database backup retention period in days.

Conditions:
  HasNodeImageId: !Not
    - "Fn::Equals":
        - Ref: NodeImageId
        - ""
  DBReplicationRequired: !Equals
    - !Ref DatabaseReplication
    - 'Required'
  IsProdEnv: !Equals [!Ref EnvironmentPrefix, 'prod']

Resources:
  SSMServiceRole:
    Type: 'AWS::IAM::ServiceLinkedRole'
    Properties:
      AWSServiceName: ssm.amazonaws.com
      Description: 'Provides access to AWS Resources managed or used by Amazon SSM.'

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  S3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:*'
            Effect: Deny
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*
            Principal: '*'
            Condition:
              Bool:
                'aws:SecureTransport': false

  AWSServiceRoleForAmazonEKS:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${EnvironmentPrefix}-IAM-EKS'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonRoute53FullAccess

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-${AWS::StackName}-IL-VPC'

  FlowLogsRole:
    Type: "AWS::IAM::Role"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-il-FlowLogsRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /

  FlowLogsRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: /
      Roles:
        - Ref: FlowLogsRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - logs:DescribeLogGroups
          - logs:DescribeLogStreams
          Resource: "*"

  CICDFlowLogs:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowLogsRole.Arn
      LogGroupName: !Sub ${EnvironmentPrefix}-il-VPC-FlowLogs
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-il-IG'

  NatGateway1EIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: VPCGatewayAttachment

  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-il-NG'
      AllocationId: !GetAtt
        - NatGateway1EIP
        - AllocationId
      SubnetId: !Ref Subnet01

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-il-Public-RT'
        - Key: Network
          Value: Public

  RouteTablePrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-il-Private-RT'
        - Key: Network
          Value: Private

  VPCEP:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: !Sub '{
        "Version":"2012-10-17",
        "Statement":[{
          "Effect":"Allow",
          "Principal":"*",
          "Action":["s3:*"],
          "Resource":["*"]
        }]
      }'
      RouteTableIds:
        - !Ref RouteTable
        - !Ref RouteTablePrivate
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC

  SNSVPCEP:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: !Sub '{
        "Version":"2012-10-17",
        "Statement":[{
          "Effect":"Allow",
          "Principal":{
            "AWS":"${EKSNodeInstanceRole.Arn}"
          },
          "Action":["sns:*"],
          "Resource":["*"]
        }]
      }'
      SubnetIds:
        - !Ref Subnet04
        - !Ref Subnet05
        - !Ref Subnet06
      SecurityGroupIds:
        - !Ref VPCEPNodeSecurityGroup
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.sns
      VpcId: !Ref VPC

  SQSVPCEP:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: !Sub '{
        "Version":"2012-10-17",
        "Statement":[{
          "Effect":"Allow",
          "Principal":{
            "AWS":"${EKSNodeInstanceRole.Arn}"
          },
          "Action":["sqs:*"],
          "Resource":["*"]
        }]
      }'
      SubnetIds:
        - !Ref Subnet04
        - !Ref Subnet05
        - !Ref Subnet06
      SecurityGroupIds:
        - !Ref VPCEPNodeSecurityGroup
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.sqs
      VpcId: !Ref VPC

  EC2VPCEP:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: !Sub '{
        "Version":"2012-10-17",
        "Statement":[{
          "Effect":"Allow",
          "Principal":"*",
          "Action":["ec2:*"],
          "Resource":["*"]
        }]
      }'
      SubnetIds:
        - !Ref Subnet04
        - !Ref Subnet05
        - !Ref Subnet06
      SecurityGroupIds:
        - !Ref VPCEPNodeSecurityGroup
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2
      VpcId: !Ref VPC

  DynamoDBVpcEndPoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            AWS: !GetAtt EKSNodeInstanceRole.Arn
          Action: dynamodb:*
          Resource: "*"
      RouteTableIds:
        - !Ref RouteTable
        - !Ref RouteTablePrivate
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      VpcEndpointType: Gateway
      VpcId: !Ref VPC

  Route:
    DependsOn: VPCGatewayAttachment
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RoutePrivate:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  Subnet01:
    Type: 'AWS::EC2::Subnet'
    Metadata:
      Comment: Subnet 01
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref Subnet01Block
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-il-Pub-Subnet01'
        - Key: kubernetes.io/role/elb
          Value: 1

  Subnet02:
    Type: 'AWS::EC2::Subnet'
    Metadata:
      Comment: Subnet 02
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref Subnet02Block
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-il-Public-Subnet02'
        - Key: kubernetes.io/role/elb
          Value: 1

  Subnet03:
    Type: 'AWS::EC2::Subnet'
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone: !Select
        - '2'
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref Subnet03Block
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-il-Public-Subnet03'
        - Key: kubernetes.io/role/elb
          Value: 1

  Subnet04:
    Type: 'AWS::EC2::Subnet'
    Metadata:
      Comment: Subnet 04
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref Subnet04Block
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-il-Private-Subnet04'
        - Key: kubernetes.io/role/internal-elb
          Value: 1

  Subnet05:
    Type: 'AWS::EC2::Subnet'
    Metadata:
      Comment: Subnet 05
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref Subnet05Block
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-il-Private-Subnet05'
        - Key: kubernetes.io/role/internal-elb
          Value: 1

  Subnet06:
    Type: 'AWS::EC2::Subnet'
    Metadata:
      Comment: Subnet 06
    Properties:
      AvailabilityZone: !Select
        - '2'
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref Subnet06Block
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-il-Private-Subnet06'
        - Key: kubernetes.io/role/internal-elb
          Value: 1

  Subnet01RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet01
      RouteTableId: !Ref RouteTable

  Subnet02RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet02
      RouteTableId: !Ref RouteTable

  Subnet03RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet03
      RouteTableId: !Ref RouteTable

  Subnet04RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet04
      RouteTableId: !Ref RouteTablePrivate

  Subnet05RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet05
      RouteTableId: !Ref RouteTablePrivate

  Subnet06RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet06
      RouteTableId: !Ref RouteTablePrivate

  ControlPlaneSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC

  EKSCluster:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: !Ref ClusterName
      RoleArn: !GetAtt AWSServiceRoleForAmazonEKS.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Ref Subnet01
          - !Ref Subnet02
          - !Ref Subnet03
          - !Ref Subnet04
          - !Ref Subnet05
          - !Ref Subnet06
    DependsOn: [ "AWSServiceRoleForAmazonEKS", "ControlPlaneSecurityGroup" ]

  EKSNodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - "arn:aws:iam::aws:policy/AmazonRoute53FullAccess"
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator"
        - "arn:aws:iam::aws:policy/AWSWAFFullAccess"
        - "arn:aws:iam::aws:policy/AdministratorAccess"
      Path: /

  NodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - Ref: EKSNodeInstanceRole

  NodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-il-EKS-Node-SG'

  VPCEPNodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security group for VPC Endpoints
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-il-VPCEP-SG'

  NodeSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      FromPort: 0
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 65535

  VPCEPSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: VPCEPNodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      FromPort: 0
      GroupId: !Ref VPCEPNodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref VPCEPNodeSecurityGroup
      ToPort: 65535

  NodeBastionSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: BastionSecurityGroup
    Properties:
      Description: Allow bastion node to communicate with nodes in ssh
      FromPort: 22
      ToPort: 22
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref BastionSecurityGroup

  VPCEPNodeSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn:
      - NodeSecurityGroup
      - VPCEPNodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      FromPort: 0
      GroupId: !Ref VPCEPNodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 65535

  NodeVPCEPSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn:
      - NodeSecurityGroup
      - VPCEPNodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      FromPort: 0
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref VPCEPNodeSecurityGroup
      ToPort: 65535

  BastionSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-IL-Bastion-SG'
      GroupDescription: Security group for bastion node
      VpcId: !Ref VPC

  BastionNodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/service-role/AmazonSSMMaintenanceWindowRole"
      Path: /

  BastionInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - Ref: BastionNodeInstanceRole

  BastionNodeLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: "false"
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: !Ref BastionNodeVolumeSize
            VolumeType: gp2
        - DeviceName: /dev/xvdb
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: !Ref BastionNodeVolumeSize
            VolumeType: gp2
      IamInstanceProfile: !GetAtt BastionInstanceProfile.Arn
      ImageId: !Ref BastionImageID
      InstanceType: !Ref BastionInstanceType
      KeyName: !Ref BastionKeyName
      SecurityGroups:
        - Ref: BastionSecurityGroup

  BastionNodeGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      DesiredCapacity: !Ref BastionNodeAutoScalingGroupDesiredCapacity
      LaunchConfigurationName: !Ref BastionNodeLaunchConfig
      MaxSize: !Ref BastionNodeAutoScalingGroupMaxSize
      MinSize: !Ref BastionNodeAutoScalingGroupMinSize
      Tags:
        - Key: Name
          PropagateAtLaunch: "true"
          Value: !Sub ${EnvironmentPrefix}-${NodeGroupName}-Bastion-Node
        - Key: 'Patch Group'
          PropagateAtLaunch: "true"
          Value: AmazonLinux2
      VPCZoneIdentifier:
        - !Ref Subnet04
        - !Ref Subnet05
        - !Ref Subnet06
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: "1"
        MinInstancesInService: !Ref BastionNodeAutoScalingGroupDesiredCapacity
        PauseTime: PT5M

  ClusterControlPlaneSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      FromPort: 443
      GroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 443

  ControlPlaneEgressToNodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 1025
      GroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 443
      GroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 443

  NodeSecurityGroupFromControlPlaneIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      FromPort: 1025
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      FromPort: 443
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      ToPort: 443

  ALBIngControllerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: /
      Roles:
        - Ref: EKSNodeInstanceRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - acm:DescribeCertificate
          - acm:ListCertificates
          - acm:GetCertificate
          Resource: "*"
        - Effect: Allow
          Action:
          - ec2:AuthorizeSecurityGroupIngress
          - ec2:CreateSecurityGroup
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DeleteSecurityGroup
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAddresses
          - ec2:DescribeInstances
          - ec2:DescribeInstanceStatus
          - ec2:DescribeInternetGateways
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeTags
          - ec2:DescribeVpcs
          - ec2:ModifyInstanceAttribute
          - ec2:ModifyNetworkInterfaceAttribute
          - ec2:RevokeSecurityGroupIngress
          Resource: "*"
        - Effect: Allow
          Action:
          - elasticloadbalancing:AddListenerCertificates
          - elasticloadbalancing:AddTags
          - elasticloadbalancing:CreateListener
          - elasticloadbalancing:CreateLoadBalancer
          - elasticloadbalancing:CreateRule
          - elasticloadbalancing:CreateTargetGroup
          - elasticloadbalancing:DeleteListener
          - elasticloadbalancing:DeleteLoadBalancer
          - elasticloadbalancing:DeleteRule
          - elasticloadbalancing:DeleteTargetGroup
          - elasticloadbalancing:DeregisterTargets
          - elasticloadbalancing:DescribeListenerCertificates
          - elasticloadbalancing:DescribeListeners
          - elasticloadbalancing:DescribeLoadBalancers
          - elasticloadbalancing:DescribeLoadBalancerAttributes
          - elasticloadbalancing:DescribeRules
          - elasticloadbalancing:DescribeSSLPolicies
          - elasticloadbalancing:DescribeTags
          - elasticloadbalancing:DescribeTargetGroups
          - elasticloadbalancing:DescribeTargetGroupAttributes
          - elasticloadbalancing:DescribeTargetHealth
          - elasticloadbalancing:ModifyListener
          - elasticloadbalancing:ModifyLoadBalancerAttributes
          - elasticloadbalancing:ModifyRule
          - elasticloadbalancing:ModifyTargetGroup
          - elasticloadbalancing:ModifyTargetGroupAttributes
          - elasticloadbalancing:RegisterTargets
          - elasticloadbalancing:RemoveListenerCertificates
          - elasticloadbalancing:RemoveTags
          - elasticloadbalancing:SetIpAddressType
          - elasticloadbalancing:SetSecurityGroups
          - elasticloadbalancing:SetSubnets
          - elasticloadbalancing:SetWebACL
          Resource: "*"
        - Effect: Allow
          Action:
          - iam:CreateServiceLinkedRole
          - iam:GetServerCertificate
          - iam:ListServerCertificates
          Resource: "*"
        - Effect: Allow
          Action:
          - waf-regional:GetWebACLForResource
          - waf-regional:GetWebACL
          - waf-regional:AssociateWebACL
          - waf-regional:DisassociateWebACL
          Resource: "*"
        - Effect: Allow
          Action:
          - tag:GetResources
          - tag:TagResources
          Resource: "*"
        - Effect: Allow
          Action:
          - waf:GetWebACL
          Resource: "*"

  LogsPolicyForWorker:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "LogsPolicyForWorker"
      Roles:
        - Ref: EKSNodeInstanceRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Action:
          - "logs:DescribeLogGroups"
          - "logs:DescribeLogStreams"
          - "logs:CreateLogGroup"
          - "logs:CreateLogStream"
          - "logs:PutLogEvents"
          Resource: "*"

  APIGWIngControllerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "APIGWIngControllerPolicy"
      Roles:
        - Ref: EKSNodeInstanceRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Action:
          - "iam:GetRole"
          - "iam:GetPolicy"
          - "iam:UpdateUser"
          - "iam:CreateRole"
          - "iam:DeleteRole"
          - "sts:*"
          - "iam:AttachRolePolicy"
          - "iam:DeleteUser"
          - "iam:PutRolePolicy"
          - "iam:CreateUser"
          - "iam:PassRole"
          - "iam:DetachRolePolicy"
          - "iam:DeleteRolePolicy"
          - "iam:UpdateRole"
          - "iam:GetUser"
          - "ec2:*"
          - "autoscaling:*"
          Resource: "*"

  ASGPolicyForWorker:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "ASGPolicyForWorker"
      Roles:
        - Ref: EKSNodeInstanceRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Action:
          - "autoscaling:DescribeAutoScalingGroups"
          - "autoscaling:DescribeAutoScalingInstances"
          - "autoscaling:SetDesiredCapacity"
          - "autoscaling:TerminateInstanceInAutoScalingGroup"
          - "autoscaling:DescribeTags"
          Resource: "*"

  FluentdSTSPolicyForWorker:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "FluentdSTSPolicyForWorker"
      Roles:
        - Ref: EKSNodeInstanceRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Action:
          - "sts:*"
          Resource: !Ref FluentdSharedLogRoleARN

  Route53STSPolicyForWorker:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "Route53STSPolicyForWorker"
      Roles:
        - Ref: EKSNodeInstanceRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Action:
          - "sts:*"
          Resource: !Ref Route53SharedRoleARN

  ADBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security group for db
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-IL-DB-Node-SG'

  ADBSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: ADBSecurityGroup
    Properties:
      Description: Allow Kube nodes to communicate with the DB
      FromPort: 3306
      GroupId: !Ref ADBSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 3306

  ADBSecurityGroupBastionIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: ADBSecurityGroup
    Properties:
      Description: Allow bastion node to communicate with the DB
      FromPort: 3306
      GroupId: !Ref ADBSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref BastionSecurityGroup
      ToPort: 3306

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: CloudFormation managed DB subnet group.
      SubnetIds:
        - !Ref Subnet04
        - !Ref Subnet05
        - !Ref Subnet06

  RDSDBInstanceParameterGroup:
    Type: "AWS::RDS::DBParameterGroup"
    Properties:
      Description: "The-xyz Instance Parameter Group"
      Family: aurora5.6
      Parameters:
        max_connections: "16000"

  RDSDBClusterParameterGroup:
    Type: "AWS::RDS::DBClusterParameterGroup"
    Properties:
      Description: "The-xyz Cluster Parameter Group"
      Family: aurora5.6
      Parameters:
        max_connections: 16000
        binlog_format: STATEMENT

  RDSKey:
    Condition: IsProdEnv
    Type: "AWS::KMS::Key"
    Properties:
      Description: !Sub "This is ${EnvironmentPrefix} environment customer managed CMK for Lambda env vars at rest encrytion."
      EnableKeyRotation: true
      Enabled: true
      KeyPolicy:
        Statement:
          -
            Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"
          -
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt CustomResourceLambdaExecutionRole.Arn
            Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"
          -
            Effect: Allow
            Sid: Allow administration of the key
            Principal:
              AWS: !Ref AWS::AccountId
            Action:
              - "kms:*"
            Resource: "*"
      PendingWindowInDays: 7

  LambdaKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: !Sub "This is ${EnvironmentPrefix} environment customer managed CMK for Lambda Envs at rest encrytion."
      EnableKeyRotation: true
      Enabled: true
      KeyPolicy:
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"
          -
            Effect: Allow
            Sid: Allow administration of the key
            Principal:
              AWS: !Ref AWS::AccountId
            Action:
              - "kms:*"
            Resource: "*"
      PendingWindowInDays: 7

  SecretKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: !Sub "This is ${EnvironmentPrefix} environment customer managed CMK for Secret at rest encrytion."
      EnableKeyRotation: true
      Enabled: true
      KeyPolicy:
        Statement:
          -
            Effect: Allow
            Principal:
              Service: secretsmanager.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"
          -
            Effect: Allow
            Sid: Allow administration of the key
            Principal:
              AWS: !Ref AWS::AccountId
            Action:
              - "kms:*"
            Resource: "*"
      PendingWindowInDays: 7

  CustomResourceLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonRDSFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /

  CustomResourceLambdaPermissionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: /
      Roles:
        - Ref: CustomResourceLambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - kms:*
          Resource: "*"

  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora
      DatabaseName: !Ref "DatabaseName"
      MasterUsername: !Ref "DatabaseUsername"
      MasterUserPassword: !Ref "DatabasePassword"
      DBClusterParameterGroupName: !Ref "RDSDBClusterParameterGroup"
      BackupRetentionPeriod: !Ref "RDSBackupRetentionPeriod"
      StorageEncrypted: True
      DeletionProtection: true
      KmsKeyId: !If
        - IsProdEnv
        - !Ref RDSKey
        - !Ref AWS::NoValue
      PreferredBackupWindow: 01:00-02:00
      PreferredMaintenanceWindow: mon:03:00-mon:04:00
      DBSubnetGroupName: !Ref "DatabaseSubnetGroup"
      DBClusterIdentifier: !Ref "DBClusterIdentifier"
      VpcSecurityGroupIds:
         -
            !Ref "ADBSecurityGroup"
      Tags:
         -
            Key: "Cluster Name"
            Value: !Ref "DBClusterIdentifier"

  DatabasePrimaryInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora
      DBClusterIdentifier: !Ref "DatabaseCluster"
      DBInstanceClass: !Ref "InstanceType"
      DBSubnetGroupName: !Ref "DatabaseSubnetGroup"
      DBParameterGroupName: !Ref "RDSDBInstanceParameterGroup"
      MultiAZ: !If
        - IsProdEnv
        - true
        - false
      Tags:
         -
            Key: "Cluster Name"
            Value: !Ref "DBClusterIdentifier"

  AutoScalerTarget:
    Condition: DBReplicationRequired
    DependsOn: DatabaseCluster
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref DBAutoScalingGroupMinSize
      MaxCapacity: !Ref DBAutoScalingGroupMaxSize
      ResourceId: !Sub "cluster:${DBClusterIdentifier}"
      ScalableDimension: rds:cluster:ReadReplicaCount
      ServiceNamespace: rds
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/rds.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_RDSCluster"

  AutoScaler:
    Condition: DBReplicationRequired
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      ScalingTargetId: !Ref "AutoScalerTarget"
      PolicyName: xyz
      PolicyType: TargetTrackingScaling
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: RDSReaderAverageCPUUtilization
        TargetValue: 80.0
        ScaleOutCooldown: 300
        ScaleInCooldown: 300
        DisableScaleIn: False

  DBPasswordSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: "This is a Secrets Manager secret for an RDS DB instance"
      Name: !Sub '${EnvironmentPrefix}-IL-DB-Password'
      SecretString: !Sub '{"username":"${DatabaseUsername}","password":"${DatabasePassword}"}'
      KmsKeyId: !Ref SecretKey
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-IL-DB-Password'

  SecretRDSAttachment:
    Type: "AWS::SecretsManager::SecretTargetAttachment"
    Properties:
      SecretId: !Ref DBPasswordSecret
      TargetId: !Ref DatabaseCluster
      TargetType: AWS::RDS::DBCluster

  APIGWCloudWatchRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
      Path: /

  APIGWAccountSetting:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt APIGWCloudWatchRole.Arn

Outputs:
  SubnetIds:
    Description: All subnets in the VPC
    Value: !Join
      - ','
      - - !Ref Subnet04
        - !Ref Subnet05
        - !Ref Subnet06
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-SubnetIds"

  PublicSubnetIds:
    Description: All public subnets in the VPC
    Value: !Join
      - ','
      - - !Ref Subnet01
        - !Ref Subnet02
        - !Ref Subnet03
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnetIds"

  SecurityGroups:
    Description: >-
      Security group for the cluster control plane communication with worker
      nodes
    Value: !Join
      - ','
      - - !Ref ControlPlaneSecurityGroup
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-SecurityGroups"

  VpcId:
    Description: The VPC Id
    Value: !Ref VPC
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-VpcId"

  AllSubnetIds:
    Description: All subnets in the VPC
    Value: !Join
      - ','
      - - !Ref Subnet01
        - !Ref Subnet02
        - !Ref Subnet03
        - !Ref Subnet04
        - !Ref Subnet05
        - !Ref Subnet06
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-AllSubnetIds"

  RoleArn:
    Description: The role that EKS will use to create AWS resources for Kubernetes clusters
    Value: !GetAtt AWSServiceRoleForAmazonEKS.Arn
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-RoleArn"

  NodeInstanceRole:
    Description: The node instance role
    Value: !GetAtt EKSNodeInstanceRole.Arn
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-NodeInstanceRole"

  NodeSecurityGroup:
    Description: The security group for the node group
    Value: !Ref NodeSecurityGroup
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-NodeSecurityGroup"

  DBPasswordSecretOutput:
    Description: DB Password Secret Arn
    Value: !Ref DBPasswordSecret
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-DBPasswordSecret"

  ADBSecurityGroup:
    Description: The security group for the node group
    Value: !Ref ADBSecurityGroup
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ADBSecurityGroup"

  RouteTable:
    Description: Public RouteTable ID
    Value: !Ref RouteTable
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-RouteTable"

  RouteTablePrivate:
    Description: Private RouteTable ID
    Value: !Ref RouteTablePrivate
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-RouteTablePrivate"

  NodeInstanceProfile:
    Description: K8s Nodes NodeInstanceProfile
    Value: !GetAtt NodeInstanceProfile.Arn
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-NodeInstanceProfile"

  CustomResourceLambdaExecutionRoleArn:
    Description: Custom Resource Lambda Execution Role
    Value: !GetAtt CustomResourceLambdaExecutionRole.Arn
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-CustomResourceLambdaExecutionRoleArn"

  LambdaKey:
    Description: KMS Key for lambda
    Value: !GetAtt LambdaKey.Arn
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-LambdaKey"

  SecretKey:
    Description: KMS Key for secrets
    Value: !Ref SecretKey
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-SecretKey"
