AWSTemplateFormatVersion: 2010-09-09
Description: OutSystems Lifetime Infrastructure Setup Template
Parameters:
  EnvironmentPrefix:
    Type: String
    Default: os-lifetime
    Description: Prefix for Env Name
  VpcBlock:
    Type: String
    Default: 172.32.0.0/16
    Description: >-
      The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR
      range.
  Subnet01Block:
    Type: String
    Default: 172.32.0.0/24
    Description: CidrBlock for subnet 01 within the VPC
  Subnet02Block:
    Type: String
    Default: 172.32.1.0/24
    Description: CidrBlock for subnet 02 within the VPC
  Subnet03Block:
    Type: String
    Default: 172.32.2.0/24
    Description: CidrBlock for subnet 03 within the VPC
  Subnet04Block:
    Type: String
    Default: 172.32.3.0/24
    Description: CidrBlock for subnet 04 within the VPC
  Subnet05Block:
    Type: String
    Default: 172.32.4.0/24
    Description: CidrBlock for subnet 05 within the VPC
  Subnet06Block:
    Type: String
    Default: 172.32.5.0/24
    Description: CidrBlock for subnet 06 within the VPC
  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: The EC2 Key Pair to allow SSH access to the instances
    Default: outsystems
  NodeAutoScalingGroupDesiredCapacity:
    Type: Number
    Default: 1
    Description: Desired capacity of Node Group ASG.
  NodeAutoScalingGroupMaxSize:
    Type: Number
    Default: 1
    Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.
  NodeAutoScalingGroupMinSize:
    Type: Number
    Default: 1
    Description: Minimum size of Node Group ASG.
  PolicyTargetValue:
    Type: String
    Default: 90
  NodeGroupName:
    Type: String
    Default: os-lifetime
    Description: Unique identifier for the Node Group.
  NodeImageId:
    Type: String
    Default: ami-0d114cdd278ad2398
    Description: Specify image ID for OS instances
  NodeInstanceType:
    Type: String
    Default: t3a.xlarge
    AllowedValues:
      - a1.medium
      - a1.large
      - a1.xlarge
      - a1.2xlarge
      - a1.4xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - c5.metal
      - c5d.large
      - c5d.xlarge
      - c5d.2xlarge
      - c5d.4xlarge
      - c5d.9xlarge
      - c5d.18xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - c5n.18xlarge
      - cc2.8xlarge
      - cr1.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - f1.2xlarge
      - f1.4xlarge
      - f1.16xlarge
      - g2.2xlarge
      - g2.8xlarge
      - g3s.xlarge
      - g3.4xlarge
      - g3.8xlarge
      - g3.16xlarge
      - h1.2xlarge
      - h1.4xlarge
      - h1.8xlarge
      - h1.16xlarge
      - hs1.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - i3.metal
      - i3en.large
      - i3en.xlarge
      - i3en.2xlarge
      - i3en.3xlarge
      - i3en.6xlarge
      - i3en.12xlarge
      - i3en.24xlarge
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
      - m5.metal
      - m5a.large
      - m5a.xlarge
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.8xlarge
      - m5a.12xlarge
      - m5a.16xlarge
      - m5a.24xlarge
      - m5ad.large
      - m5ad.xlarge
      - m5ad.2xlarge
      - m5ad.4xlarge
      - m5ad.12xlarge
      - m5ad.24xlarge
      - m5d.large
      - m5d.xlarge
      - m5d.2xlarge
      - m5d.4xlarge
      - m5d.8xlarge
      - m5d.12xlarge
      - m5d.16xlarge
      - m5d.24xlarge
      - m5d.metal
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
      - p3dn.24xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
      - r5.12xlarge
      - r5.16xlarge
      - r5.24xlarge
      - r5.metal
      - r5a.large
      - r5a.xlarge
      - r5a.2xlarge
      - r5a.4xlarge
      - r5a.8xlarge
      - r5a.12xlarge
      - r5a.16xlarge
      - r5a.24xlarge
      - r5ad.large
      - r5ad.xlarge
      - r5ad.2xlarge
      - r5ad.4xlarge
      - r5ad.12xlarge
      - r5ad.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.8xlarge
      - r5d.12xlarge
      - r5d.16xlarge
      - r5d.24xlarge
      - r5d.metal
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - t3a.nano
      - t3a.micro
      - t3a.small
      - t3a.medium
      - t3a.large
      - t3a.xlarge
      - t3a.2xlarge
      - u-6tb1.metal
      - u-9tb1.metal
      - u-12tb1.metal
      - x1.16xlarge
      - x1.32xlarge
      - x1e.xlarge
      - x1e.2xlarge
      - x1e.4xlarge
      - x1e.8xlarge
      - x1e.16xlarge
      - x1e.32xlarge
      - z1d.large
      - z1d.xlarge
      - z1d.2xlarge
      - z1d.3xlarge
      - z1d.6xlarge
      - z1d.12xlarge
      - z1d.metal
    ConstraintDescription: Must be a valid EC2 instance type
    Description: EC2 instance type for the node instances
  NodeVolumeSize:
    Type: Number
    Default: 150
    Description: Node volume size
  SecondNodeVolumeSize:
    Type: Number
    Default: 100
    Description: Second Node volume size
  DBClusterIdentifier:
    Type: String
    Description: Database Cluster Name
    Default: OutSystemsDB
  DatabaseUsername:
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must be between 1 to 16 alphanumeric characters.
    Description: The database admin account user name, between 1 to 16 alphanumeric characters.
    MaxLength: '16'
    MinLength: '1'
    Type: String
  DatabasePassword:
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must be between 8 to 41 alphanumeric characters.
    Description: The database admin account password, between 8 to 41 alphanumeric characters.
    MaxLength: '41'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  DBInstanceType:
    Type: String
    Default: db.t3.medium
    Description: Enter db Instance types.
  DatabaseReplication:
    Type: String
    AllowedValues:
      - 'Required'
      - 'Not Required'
    Default: Not Required
    Description: Do this deployment need Database Replication or Not
  RDSBackupRetentionPeriod:
    Type: Number
    Default: 7
    Description: Database backup retention period in days.
  SQLServerEngine:
    Type: String
    Default: "sqlserver-ex"
    Description: "SQL Server Engine to be used."
  SQLServerVersion:
    Type: String
    Default: "13.00.5850.14.v1"
    Description: "SQL Server Version to be used."
  SQLServerAllocatedStorage:
    Type: String
    Default: "100"
    Description: "SQL Server Version to be used."
  OutSystemsRootHostname:
    Type: String
    Description: "OutSystems Root Hostname to be used."
    Default: portal.xyz.com
  OutSystemsHostedZoneID:
    Type: String
    Description: "OutSystems Hostname to be used."
    Default: lifetime.portal.xyz.com
  OutSystemsHostname:
    Type: String
    Description: "OutSystems Hostname to be used."
    Default: lifetime.portal.xyz.com
  OutSystemsAdminDBUsername:
    Type: String
    NoEcho: 'true'
    Description: "OutSystems Admin DB Username to be used."
  OutSystemsAdminDBPassword:
    Type: String
    NoEcho: 'true'
    Description: "OutSystems Admin DB Password to be used."
  OutSystemsRuntimeDBAdminUsername:
    Type: String
    Description: "OutSystems RuntimeDBAdmin Username to be used."
    MaxLength: '16'
    MinLength: '1'
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must be between 8 to 41 alphanumeric characters.
  OutSystemsRuntimeDBAdminPassword:
    Type: String
    NoEcho: 'true'
    Description: "OutSystems RuntimeDBAdmin Password to be used."
    MaxLength: '41'
    MinLength: '8'
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must be between 8 to 41 alphanumeric characters.
  OutSystemsRuntimeLoggingDBAdminUsername:
    Type: String
    Description: "OutSystems RuntimeLoggingDBAdmin Username to be used."
    MaxLength: '16'
    MinLength: '1'
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must be between 8 to 41 alphanumeric characters.
  OutSystemsRuntimeLoggingDBAdminPassword:
    Type: String
    NoEcho: 'true'
    Description: "OutSystems RuntimeLoggingDBAdmin Password to be used."
    MaxLength: '41'
    MinLength: '8'
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must be between 8 to 41 alphanumeric characters.
  OutSystemsSessionDBAdminUsername:
    Type: String
    Description: "OutSystems SessionDBAdmin Username to be used."
    MaxLength: '16'
    MinLength: '1'
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must be between 8 to 41 alphanumeric characters.
  OutSystemsSessionDBAdminPassword:
    Type: String
    NoEcho: 'true'
    Description: "OutSystems SessionDBAdmin Password to be used."
    MaxLength: '41'
    MinLength: '8'
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must be between 8 to 41 alphanumeric characters.
  OutSystemsPlatformPassword:
    Type: String
    NoEcho: 'true'
    Description: "OutSystems Platform Password to be used."
  OutSystemsServicePassword:
    Type: String
    NoEcho: 'true'
    Description: "OutSystems Service Password to be used."
  OutSystemsCatalogDatabaseName:
    AllowedPattern: "[a-zA-Z0-9-_]+"
    ConstraintDescription: must be between 4 to 30 alphanumeric characters.
    Description: Database name for outsystems catalog database.
    Default: CATALOGDEV
    MaxLength: '30'
    MinLength: '4'
    Type: String
  OutSystemsSessionDatabaseName:
    AllowedPattern: "[a-zA-Z0-9-_]+"
    ConstraintDescription: must be between 4 to 30 alphanumeric characters.
    Description: Database name for outsystems session database.
    Default: xyz_sessiondev
    MaxLength: '30'
    MinLength: '4'
    Type: String
    Description: Prefix for Env Name
  Email:
    Type: String
    Description: Provide an email address from DevOps/Admin team to send the alerts.

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Network and Main Configs
        Parameters:
          - EnvironmentPrefix
          - VpcBlock
          - DomainName
          - Subnet01Block
          - Subnet02Block
          - Subnet03Block
          - Subnet04Block
          - Subnet05Block
          - Subnet06Block
          - KeyName
          - PolicyTargetValue
      - Label:
          default: OutSystems and Server Instance Configuration
        Parameters:
          - NodeGroupName
          - NodeAutoScalingGroupMinSize
          - NodeAutoScalingGroupDesiredCapacity
          - NodeAutoScalingGroupMaxSize
          - NodeImageId
          - NodeInstanceType
          - NodeVolumeSize
          - SecondNodeVolumeSize
          - OutSystemsHostname
          - OutSystemsRootHostname
          - OutSystemsHostedZoneID
          - OutSystemsAdminDBUsername
          - OutSystemsAdminDBPassword
          - OutSystemsRuntimeDBAdminUsername
          - OutSystemsRuntimeDBAdminPassword
          - OutSystemsRuntimeLoggingDBAdminUsername
          - OutSystemsRuntimeLoggingDBAdminPassword
          - OutSystemsSessionDBAdminUsername
          - OutSystemsSessionDBAdminPassword
          - OutSystemsCatalogDatabaseName
          - OutSystemsSessionDatabaseName
          - OutSystemsPlatformPassword
          - OutSystemsServicePassword
      - Label:
          default: DB Configuration
        Parameters:
          - DBClusterIdentifier
          - DatabaseUsername
          - DatabasePassword
          - DBInstanceType
          - DatabaseReplication
          - RDSBackupRetentionPeriod
          - SQLServerVersion
          - SQLServerAllocatedStorage
          - SQLServerEngine

Conditions:
  IsRDSAdvancedFeatures: !Not [!Equals [!Ref SQLServerEngine, 'sqlserver-ex']]
  DBReplicationRequired: !Equals [!Ref DatabaseReplication, 'Required']

Resources:
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref OutSystemsRootHostname
      SubjectAlternativeNames:
        - !Sub "*.${OutSystemsRootHostname}"
      DomainValidationOptions:
        - DomainName: !Ref OutSystemsRootHostname
          HostedZoneId: !Ref OutSystemsHostedZoneID
      ValidationMethod: DNS

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-OS-VPC'

  FlowLogsRole:
    Type: "AWS::IAM::Role"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-OS-FlowLogsRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /

  FlowLogsRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: /
      Roles:
        - Ref: FlowLogsRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - logs:DescribeLogGroups
          - logs:DescribeLogStreams
          Resource: "*"

  CICDFlowLogs:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowLogsRole.Arn
      LogGroupName: !Sub ${EnvironmentPrefix}-VPC-FlowLogs
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-OS-IG'

  NatGateway1EIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: VPCGatewayAttachment

  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-OS-NG'
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref Subnet01

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-OS-Public-RT'
        - Key: Network
          Value: Public

  RouteTablePrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-OS-Private-RT'
        - Key: Network
          Value: Private

  Route:
    DependsOn: VPCGatewayAttachment
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RoutePrivate:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  Subnet01:
    Type: 'AWS::EC2::Subnet'
    Metadata:
      Comment: Subnet 01
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref Subnet01Block
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-Pub-Subnet01'

  Subnet02:
    Type: 'AWS::EC2::Subnet'
    Metadata:
      Comment: Subnet 02
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref Subnet02Block
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-OS-Pub-Subnet02'

  Subnet03:
    Type: 'AWS::EC2::Subnet'
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone: !Select
        - '2'
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref Subnet03Block
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-OS-Pub-Subnet03'

  Subnet04:
    Type: 'AWS::EC2::Subnet'
    Metadata:
      Comment: Subnet 04
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref Subnet04Block
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-OS-Pri-Subnet04'

  Subnet05:
    Type: 'AWS::EC2::Subnet'
    Metadata:
      Comment: Subnet 05
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref Subnet05Block
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-OS-Pri-Subnet05'

  Subnet06:
    Type: 'AWS::EC2::Subnet'
    Metadata:
      Comment: Subnet 06
    Properties:
      AvailabilityZone: !Select
        - '2'
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref Subnet06Block
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-OS-Pri-Subnet06'

  Subnet01RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet01
      RouteTableId: !Ref RouteTable

  Subnet02RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet02
      RouteTableId: !Ref RouteTable

  Subnet03RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet03
      RouteTableId: !Ref RouteTable

  Subnet04RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet04
      RouteTableId: !Ref RouteTablePrivate

  Subnet05RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet05
      RouteTableId: !Ref RouteTablePrivate

  Subnet06RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet06
      RouteTableId: !Ref RouteTablePrivate

  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-OS-ALB-SG'
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC

  NodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-OS-Node-IR'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/service-role/AmazonSSMMaintenanceWindowRole"
      Path: /

  AssumePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: /
      Roles:
        - Ref: NodeInstanceRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Resource: "*"

  CloudWatchPutMetricsRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudWatch_PutMetricData
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: CloudWatchPutMetricData
          Effect: Allow
          Action:
          - cloudwatch:PutMetricData
          Resource:
          - "*"
      Roles:
      - Ref: NodeInstanceRole

  NodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - Ref: NodeInstanceRole

  NodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-OS-NSG'
      GroupDescription: Security group for all nodes in the cluster
      VpcId: !Ref VPC

  NodeSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow node to communicate with each other
      FromPort: 0
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 65535

  ALBSecurityGroupIngress443:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow internet access through SSL
      FromPort: 443
      CidrIp: 0.0.0.0/0
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
      ToPort: 443

  ALBSecurityGroupSelfIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow internet access through SSL
      FromPort: 0
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 65535

  ALBSecurityGroupIngress80:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow internet access
      FromPort: 80
      CidrIp: 0.0.0.0/0
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
      ToPort: 80

  ALBSecurityGroupToNodeSecurityGroupEgress:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      Description: Allow the alb to communicate with OS
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 80
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
      ToPort: 80

  ALBSecurityGroupToNodeSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow the alb to communicate with OS
      SourceSecurityGroupId: !Ref ALBSecurityGroup
      FromPort: 80
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 80

  ALBSecurityGroupToNodeSecurityGroupEgress443:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      Description: Allow the alb to communicate with OS
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 443
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
      ToPort: 443

  ALBSecurityGroupToNodeSecurityGroupIngress443:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow the alb to communicate with OS
      SourceSecurityGroupId: !Ref ALBSecurityGroup
      FromPort: 443
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443

  ADBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security group for db
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-OS-DB-SG'

  ADBSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: ADBSecurityGroup
    Properties:
      Description: Allow Kube nodes to communicate with the DB
      FromPort: 1433
      GroupId: !Ref ADBSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 1433

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: CloudFormation managed DB subnet group.
      SubnetIds:
        - !Ref Subnet04
        - !Ref Subnet05
        - !Ref Subnet06

  DatabasePrimaryInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: sqlserver-ex
      EngineVersion: !Ref "SQLServerVersion"
      AllocatedStorage: !Ref "SQLServerAllocatedStorage"
      DBInstanceClass: !Ref "DBInstanceType"
      DBInstanceIdentifier: !Sub "${DBClusterIdentifier}-Primary"
      BackupRetentionPeriod: !Ref "RDSBackupRetentionPeriod"
      StorageEncrypted: !If
        - IsRDSAdvancedFeatures
        - True
        - False
      PreferredBackupWindow: 01:00-02:00
      PreferredMaintenanceWindow: mon:03:00-mon:04:00
      DBSubnetGroupName: !Ref "DatabaseSubnetGroup"
      DBSubnetGroupName: !Ref "DatabaseSubnetGroup"
      BackupRetentionPeriod: !Ref "RDSBackupRetentionPeriod"
      MasterUsername: !Ref "DatabaseUsername"
      MasterUserPassword: !Ref "DatabasePassword"
      LicenseModel: license-included
      MultiAZ: !If
        - IsRDSAdvancedFeatures
        - True
        - False
      VPCSecurityGroups:
         -
            !Ref "ADBSecurityGroup"
      Tags:
         -
            Key: "Name"
            Value: !Sub "${DBClusterIdentifier}-Primary"

  DatabaseReplicationInstance:
    Condition: DBReplicationRequired
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: sqlserver-ex
      EngineVersion: !Ref "SQLServerVersion"
      AllocatedStorage: !Ref "SQLServerAllocatedStorage"
      DBInstanceClass: !Ref "DBInstanceType"
      DBInstanceIdentifier: !Sub "${DBClusterIdentifier}-Replica"
      BackupRetentionPeriod: !Ref "RDSBackupRetentionPeriod"
      StorageEncrypted: !If
        - IsRDSAdvancedFeatures
        - True
        - False
      PreferredBackupWindow: 01:00-02:00
      PreferredMaintenanceWindow: mon:03:00-mon:04:00
      DBSubnetGroupName: !Ref "DatabaseSubnetGroup"
      DBSubnetGroupName: !Ref "DatabaseSubnetGroup"
      BackupRetentionPeriod: !Ref "RDSBackupRetentionPeriod"
      MasterUsername: !Ref "DatabaseUsername"
      MasterUserPassword: !Ref "DatabasePassword"
      MultiAZ: !If
        - IsRDSAdvancedFeatures
        - True
        - False
      SourceDBInstanceIdentifier: !Ref DatabasePrimaryInstance
      SourceRegion: !Ref AWS::Region
      LicenseModel: license-included
      VPCSecurityGroups:
         -
            !Ref "ADBSecurityGroup"
      Tags:
         -
            Key: "Name"
            Value: !Sub "${DBClusterIdentifier}-Primary"

  DBPasswordSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: "This is a Secrets Manager secret for OS RDS DB instance"
      Name: !Sub '${EnvironmentPrefix}-OS-DB-Password'
      SecretString: !Sub '{"username":"${DatabaseUsername}","password":"${DatabasePassword}"}'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-OS-DB-Password'

  SecretRDSAttachment:
    Type: "AWS::SecretsManager::SecretTargetAttachment"
    Properties:
      SecretId: !Ref DBPasswordSecret
      TargetId: !Ref DatabasePrimaryInstance
      TargetType: AWS::RDS::DBInstance

  OSPasswordSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: "This is a Secrets Manager secret for an RDS DB instance"
      Name: !Sub '${EnvironmentPrefix}-OS-Credentials'
      SecretString: !Sub '{"OutSystemsAdminDBUsername":"${OutSystemsAdminDBUsername}","OutSystemsAdminDBPassword":"${OutSystemsAdminDBPassword}","OutSystemsAdminDBPassword":"${OutSystemsAdminDBPassword}","OutSystemsRuntimeDBAdminUsername":"${OutSystemsRuntimeDBAdminUsername}","OutSystemsRuntimeDBAdminPassword":"${OutSystemsRuntimeDBAdminPassword}","OutSystemsRuntimeLoggingDBAdminUsername":"${OutSystemsRuntimeLoggingDBAdminUsername}","OutSystemsRuntimeLoggingDBAdminPassword":"${OutSystemsRuntimeLoggingDBAdminPassword}","OutSystemsSessionDBAdminUsername":"${OutSystemsSessionDBAdminUsername}","OutSystemsSessionDBAdminPassword":"${OutSystemsSessionDBAdminPassword}","OutSystemsPlatformPassword":"${OutSystemsPlatformPassword}","OutSystemsServicePassword":"${OutSystemsServicePassword}","OutSystemsCatalogDatabaseName":"${OutSystemsCatalogDatabaseName}","OutSystemsSessionDatabaseName":"${OutSystemsSessionDatabaseName}"}'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentPrefix}-OS-DB-Password'

  NodeLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    DependsOn: DatabasePrimaryInstance
    Properties:
      AssociatePublicIpAddress: "false"
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: !Ref NodeVolumeSize
            VolumeType: gp2
        - DeviceName: xvdd
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: !Ref SecondNodeVolumeSize
            VolumeType: gp2
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: !Ref NodeImageId
      InstanceType: !Ref NodeInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - Ref: NodeSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          <powershell>
          Import-Module c:\ProgramData\Amazon\EC2-Windows\Launch\Module\Ec2Launch.psm1 ; Add-Routes
          if (Test-Path C:\\Users\\Administrator\\Documents\\installed.txt -PathType Leaf) {
            WWrite-Host "Installation is done on this AMI. So doing necessary changes"
            cp "C:\\Program Files\\OutSystems\\Platform Server\\private.key.back" "C:\\Program Files\\OutSystems\\Platform Server\\private.key"
            $token = Invoke-RestMethod -Headers @{"X-aws-ec2-metadata-token-ttl-seconds" = "21600"} -Method PUT –Uri http://169.254.169.254/latest/api/token
            $privateIp = Invoke-RestMethod -Headers @{"X-aws-ec2-metadata-token" = $token} -Method GET -Uri http://169.254.169.254/latest/meta-data/local-ipv4
            $hostname = hostname
            $hostname_lower = $hostname.ToLower()
            [xml]$xmlDoc = Get-Content "C:\\Users\\Administrator\\Documents\\server.hsconf"
            $xmlDoc.EnvironmentConfiguration.NetworkConfiguration.OutgoingIPAddress = "$privateIp"
            $xmlDoc.EnvironmentConfiguration.CacheInvalidationConfiguration.ServiceHost = "$privateIp"
            $xmlDoc.EnvironmentConfiguration.ServiceConfiguration.CompilerServerHostname = "$privateIp"
            $xmlDoc.Save("C:\\Users\\Administrator\\Documents\\server.hsconf")
            cp "C:\\Users\\Administrator\\Documents\\server.hsconf" "C:\\Program Files\\OutSystems\\Platform Server"
            SQLCMD.EXE -S ${DatabasePrimaryInstance.Endpoint.Address} -U ${OutSystemsAdminDBUsername} -P ${OutSystemsAdminDBPassword} -d ${OutSystemsCatalogDatabaseName} -Q "UPDATE ossys_Server SET IP_ADDRESS = '$privateIp' WHERE NAME = '$hostname_lower'"
            SQLCMD.EXE -S ${DatabasePrimaryInstance.Endpoint.Address} -U ${OutSystemsAdminDBUsername} -P ${OutSystemsAdminDBPassword} -d ${OutSystemsCatalogDatabaseName} -Q "UPDATE ossys_Parameter SET VAL = '$privateIp' WHERE HOST = '$hostname' AND NAME = 'OutSystems.HubEdition.OutboundIPAddress'"
            SQLCMD.EXE -S ${DatabasePrimaryInstance.Endpoint.Address} -U ${OutSystemsAdminDBUsername} -P ${OutSystemsAdminDBPassword} -d ${OutSystemsCatalogDatabaseName} -Q "delete from ossys_parameter where name = 'ClientApplicationToken'"
            SQLCMD.EXE -S ${DatabasePrimaryInstance.Endpoint.Address} -U ${OutSystemsAdminDBUsername} -P ${OutSystemsAdminDBPassword} -d ${OutSystemsCatalogDatabaseName} -Q "delete from ossys_parameter where name = 'privateKeyValidation'"
            SQLCMD.EXE -S ${DatabasePrimaryInstance.Endpoint.Address} -U ${OutSystemsAdminDBUsername} -P ${OutSystemsAdminDBPassword} -d ${OutSystemsCatalogDatabaseName} -Q "delete from ossys_Parameter where name = 'OutSystems.HubEdition.MobileLogin_AuthenticationHMACKey'"
            SQLCMD.EXE -S ${DatabasePrimaryInstance.Endpoint.Address} -U ${OutSystemsAdminDBUsername} -P ${OutSystemsAdminDBPassword} -d ${OutSystemsCatalogDatabaseName} -Q "delete from ossys_Parameter where name = 'OutSystems.HubEdition.MobileLogin_AuthenticationEncryptKey'"
            Restart-Service AmazonSSMAgent
            & 'C:\\Program Files\\OutSystems\\Platform Server\\ConfigurationTool.com' /SetupInstall ${OutSystemsAdminDBUsername} ${OutSystemsAdminDBPassword} ${OutSystemsAdminDBUsername} ${OutSystemsAdminDBPassword} /SetPlatformServerAdminPassword ${OutSystemsPlatformPassword} /RebuildSession ${OutSystemsSessionDBAdminUsername} ${OutSystemsSessionDBAdminPassword} /CreateUpgradeCacheInvalidationService /SCInstall
          } else {
            $token = Invoke-RestMethod -Headers @{"X-aws-ec2-metadata-token-ttl-seconds" = "21600"} -Method PUT –Uri http://169.254.169.254/latest/api/token
            $privateIp = Invoke-RestMethod -Headers @{"X-aws-ec2-metadata-token" = $token} -Method GET -Uri http://169.254.169.254/latest/meta-data/local-ipv4
            $values = [ordered]@{ OSADMINPLACEHOLDER = "${OutSystemsAdminDBUsername}"; OSADMINPASSWORDPLACEHOLDER = "${OutSystemsAdminDBPassword}"; OSSESSIONADMINPLACEHOLDER = "${OutSystemsSessionDBAdminUsername}"; OSSESSIONADMINPASSWORDPLACEHOLDER = "${OutSystemsSessionDBAdminPassword}"; OSRUNTIMEADMINPLACEHOLDER = "${OutSystemsRuntimeDBAdminUsername}"; OSRUNTIMEADMINPASSWORDPLACEHOLDER = "${OutSystemsRuntimeDBAdminUsername}"; OSRUNTIMELOGADMINPLACEHOLDER = "${OutSystemsRuntimeLoggingDBAdminUsername}"; OSRUNTIMELOGADMINPASSWORDPLACEHOLDER = "${OutSystemsRuntimeLoggingDBAdminPassword}"; RDSENDPOINTPLACEHOLDER = "${DatabasePrimaryInstance.Endpoint.Address}"; CATALOGDBPLACEHOLDER = "${OutSystemsCatalogDatabaseName}"; SESSIONDBPLACEHOLDER = "${OutSystemsSessionDatabaseName}"; SERVICEPASSWORDPLACEHOLDER = "${OutSystemsServicePassword}"; EC2LOCALIP = $privateIp }
            foreach ($h in $values.Keys) {
              (Get-Content -path "C:\\Users\\Administrator\\Documents\\platform_script.sql" -Raw) -replace $h, $($values.Item($h)) | Set-Content -Path "C:\\Users\\Administrator\\Documents\\platform_script.sql"
              (Get-Content -path "C:\\Users\\Administrator\\Documents\\server.hsconf" -Raw) -replace $h, $($values.Item($h)) | Set-Content -Path "C:\\Users\\Administrator\\Documents\\server.hsconf"
            }
            Write-Host "Starting Database Script"
            SQLCMD.EXE -S ${DatabasePrimaryInstance.Endpoint.Address} -U ${DatabaseUsername} -P ${DatabasePassword} -i "C:\\Users\\Administrator\\Documents\\platform_script.sql"
            Write-Host "Finished Database Script"
            cp "C:\\Users\\Administrator\\Documents\\server.hsconf" "C:\\Program Files\\OutSystems\\Platform Server"
            Write-Host "Server configuration copied. Running configuration tool"
            SQLCMD.EXE -S ${DatabasePrimaryInstance.Endpoint.Address} -U ${OutSystemsAdminDBUsername} -P ${OutSystemsAdminDBPassword} -d ${OutSystemsCatalogDatabaseName} -Q "delete from ossys_parameter where name = 'ClientApplicationToken'"
            SQLCMD.EXE -S ${DatabasePrimaryInstance.Endpoint.Address} -U ${OutSystemsAdminDBUsername} -P ${OutSystemsAdminDBPassword} -d ${OutSystemsCatalogDatabaseName} -Q "delete from ossys_parameter where name = 'privateKeyValidation'"
            SQLCMD.EXE -S ${DatabasePrimaryInstance.Endpoint.Address} -U ${OutSystemsAdminDBUsername} -P ${OutSystemsAdminDBPassword} -d ${OutSystemsCatalogDatabaseName} -Q "delete from ossys_Parameter where name = 'OutSystems.HubEdition.MobileLogin_AuthenticationHMACKey'"
            SQLCMD.EXE -S ${DatabasePrimaryInstance.Endpoint.Address} -U ${OutSystemsAdminDBUsername} -P ${OutSystemsAdminDBPassword} -d ${OutSystemsCatalogDatabaseName} -Q "delete from ossys_Parameter where name = 'OutSystems.HubEdition.MobileLogin_AuthenticationEncryptKey'"
            Restart-Service AmazonSSMAgent
            & 'C:\\Program Files\\OutSystems\\Platform Server\\ConfigurationTool.com' /SetupInstall ${OutSystemsAdminDBUsername} ${OutSystemsAdminDBPassword} ${OutSystemsAdminDBUsername} ${OutSystemsAdminDBPassword} /SetPlatformServerAdminPassword ${OutSystemsPlatformPassword} /RebuildSession ${OutSystemsSessionDBAdminUsername} ${OutSystemsSessionDBAdminPassword} /CreateUpgradeCacheInvalidationService /SCInstall
            Write-Host "Starting looking for DNS name"
            Do
            {
              $resolveDomain = (Resolve-DnsName -Name dev.portal.xyz.com -Type A | Where-Object { $_.Strings -ne '' } | Measure-Object).Count
              If ($resolveDomain -eq 0) {
                Write-Host "Didn't find any records. Sleeping for 5 minutes and trying again"
                Start-Sleep -Seconds 300
              }
              Else {
                Write-Host "Found a record for ${OutSystemsHostname}, Continuing on..."
                break
              }
            } While ($true)
            Write-Host "Starting publishing the site"
            & 'C:\\Program Files\\Common Files\\OutSystems\\11.0\\OSPTool.com' /Publish "C:\\Program Files\\OutSystems\\Platform Server\\System_Components.osp" ${OutSystemsHostname} Admin ${OutSystemsPlatformPassword}
            cp "C:\\Program Files\\OutSystems\\Platform Server\\private.key" "C:\\Program Files\\OutSystems\\Platform Server\\private.key.back"
            echo installed  > C:\\Users\\Administrator\\Documents\\installed.txt
          }
          </powershell>
          <persist>true</persist>

  NodeGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      DesiredCapacity: !Ref NodeAutoScalingGroupDesiredCapacity
      LaunchConfigurationName: !Ref NodeLaunchConfig
      TargetGroupARNs:
        - !Ref TargetGroup
      MaxSize: !Ref NodeAutoScalingGroupMaxSize
      MinSize: !Ref NodeAutoScalingGroupMinSize
      HealthCheckType: ELB
      HealthCheckGracePeriod: 120
      Tags:
        - Key: Name
          PropagateAtLaunch: "true"
          Value: !Sub ${EnvironmentPrefix}-${NodeGroupName}-Server-Node
        - Key: 'Patch Group'
          PropagateAtLaunch: "true"
          Value: Windows
      VPCZoneIdentifier:
        - !Ref Subnet04
        - !Ref Subnet05
        - !Ref Subnet06
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: "1"
        MinInstancesInService: !Ref NodeAutoScalingGroupDesiredCapacity
        PauseTime: PT10M

  CPUPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref NodeGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref PolicyTargetValue

  OSLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref Subnet01
        - !Ref Subnet02
        - !Ref Subnet03

  OSLBDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt OSLoadBalancer.DNSName
        EvaluateTargetHealth: true
        HostedZoneId: !GetAtt OSLoadBalancer.CanonicalHostedZoneID
      Name: !Ref OutSystemsHostname
      HostedZoneId: !Ref OutSystemsHostedZoneID
      Type: A

  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTPS
      HealthCheckPath: /
      HealthCheckPort: 443
      HealthCheckIntervalSeconds: 125
      HealthCheckTimeoutSeconds: 110
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 10
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 600
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        - Key: slow_start.duration_seconds
          Value: 600
      Matcher:
        HttpCode: "200,302,403,404"
      Port: 443
      Protocol: HTTPS
      VpcId: !Ref VPC

  HTTPListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: 443
            Protocol: "HTTPS"
            Query: "#{query}"
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref OSLoadBalancer
      Port: 80
      Protocol: HTTP

  OSHTTPSListenerRule1:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /lifetime
              - /lifetime/*
              - /LifeTimeSDK
              - /LifeTimeSDK/*
      ListenerArn: !Ref HTTPSListener
      Priority: 5

  OSHTTPSListenerRule2:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /LifeTimeAnalytics
              - /LifeTimeAnalytics/*
              - /servicecenter
              - /servicecenter/*
      ListenerArn: !Ref HTTPSListener
      Priority: 6

  OSHTTPSListenerRule3:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /ServiceCenter
              - /ServiceCenter/*
              - /Users
              - /Users/*
      ListenerArn: !Ref HTTPSListener
      Priority: 7

  OSHTTPSListenerExtraRule1:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /LifeTimeCore
              - /LifeTimeCore/*
              - /LifeTimeAudit
              - /LifeTimeAudit/*
      ListenerArn: !Ref HTTPSListener
      Priority: 10

  OSHTTPSListenerExtraRule2:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /LifeTimeEngine
              - /LifeTimeEngine/*
              - /LifeTimeMonitoring
              - /LifeTimeMonitoring/*
      ListenerArn: !Ref HTTPSListener
      Priority: 11

  OSHTTPSListenerExtraRule3:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /LifeTimeServices
              - /LifeTimeServices/*
              - /LTDeployments
              - /LTDeployments/*
      ListenerArn: !Ref HTTPSListener
      Priority: 12

  OSHTTPSListenerExtraRule4:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /LTEnvironments
              - /LTEnvironments/*
              - /LTResources
              - /LTResources/*
      ListenerArn: !Ref HTTPSListener
      Priority: 13

  OSHTTPSListenerExtraRule5:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /LTUserManagement
              - /LTUserManagement/*
              - /LTVersioning
              - /LTVersioning/*
      ListenerArn: !Ref HTTPSListener
      Priority: 14

  OSHTTPSListenerExtraRule6:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /PerformanceMonitor
              - /PerformanceMonitor/*
              - /PerformanceProbe
              - /PerformanceProbe/*
      ListenerArn: !Ref HTTPSListener
      Priority: 15

  OSHTTPSListenerExtraRule7:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /ADAuthProvider
              - /ADAuthProvider/*
              - /appfeedbackapi
              - /appfeedbackapi/*
      ListenerArn: !Ref HTTPSListener
      Priority: 16

  OSHTTPSListenerExtraRule8:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /AppFeedbackPlugin
              - /AppFeedbackPlugin/*
              - /ChartingServicesCore
              - /ChartingServicesCore/*
      ListenerArn: !Ref HTTPSListener
      Priority: 17

  OSHTTPSListenerExtraRule9:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /Charts
              - /Charts/*
              - /CustomHandlers
              - /CustomHandlers/*
      ListenerArn: !Ref HTTPSListener
      Priority: 18

  OSHTTPSListenerExtraRule10:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /DeviceDatabase
              - /DeviceDatabase/*
              - /ECT_Provider
              - /ECT_Provider/*
      ListenerArn: !Ref HTTPSListener
      Priority: 19

  OSHTTPSListenerExtraRule11:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /EmptyModuleWeb
              - /EmptyModuleWeb/*
              - /EPA_Taskbox
              - /EPA_Taskbox/*
      ListenerArn: !Ref HTTPSListener
      Priority: 20

  OSHTTPSListenerExtraRule12:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /LDAPAuthProvider
              - /LDAPAuthProvider/*
              - /TemplateManager
              - /TemplateManager/*
      ListenerArn: !Ref HTTPSListener
      Priority: 21

  OSHTTPSListenerExtraRule13:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /UsersServices
              - /UsersServices/*
              - /SAPDevService
              - /SAPDevService/*
      ListenerArn: !Ref HTTPSListener
      Priority: 22

  OSHTTPSListenerExtraRule14:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /SOAPDevService
              - /SOAPDevService/*
              - /RichWidgets
              - /RichWidgets/*
      ListenerArn: !Ref HTTPSListener
      Priority: 23

  OSHTTPSListenerExtraRule15:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /RESTDevService
              - /RESTDevService/*
              - /SecurityUtils
              - /SecurityUtils/*
      ListenerArn: !Ref HTTPSListener
      Priority: 24

  OSHTTPSListenerExtraRule16:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /Template_TraditionalWeb
              - /Template_TraditionalWeb/*
              - /server.api
              - /server.identity
      ListenerArn: !Ref HTTPSListener
      Priority: 25

  OSHTTPSListenerExtraRule17:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /ArchitectureDashboardProbe
              - /ArchitectureDashboardProbe/*
              - /Arch_BaseTypes
              - /Arch_BaseTypes/*
      ListenerArn: !Ref HTTPSListener
      Priority: 26

  OSHTTPSListenerExtraRule18:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /ArPr_Comm_Queue
              - /ArPr_Comm_Queue/*
              - /ArPr_Communication
              - /ArPr_Communication/*
      ListenerArn: !Ref HTTPSListener
      Priority: 27

  OSHTTPSListenerExtraRule19:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /ArPr_Core
              - /ArPr_Core/*
              - /ArPrEnv_Arch_Col
              - /ArPrEnv_Arch_Col/*
      ListenerArn: !Ref HTTPSListener
      Priority: 28

  OSHTTPSListenerExtraRule20:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /ArPrEnv_Code_Col
              - /ArPrEnv_Code_Col/*
              - /ArPrEnv_Perf_Col
              - /ArPrEnv_Perf_Col/*
      ListenerArn: !Ref HTTPSListener
      Priority: 29

  OSHTTPSListenerExtraRule21:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /ArPrEnv_Code_Col
              - /ArPrEnv_Code_Col/*
              - /ArPrEnv_Perf_Col
              - /ArPrEnv_Perf_Col/*
      ListenerArn: !Ref HTTPSListener
      Priority: 30

  HTTPSListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates:
      - CertificateArn: !Ref Certificate
      DefaultActions:
      - Type: "redirect"
        RedirectConfig:
          Protocol: "HTTPS"
          Port: 443
          Host: "#{host}"
          Path: "/lifetime"
          StatusCode: HTTP_301
      LoadBalancerArn: !Ref OSLoadBalancer
      Port: 443
      Protocol: HTTPS

  EC2ASGLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
      - PolicyName: ec2-all
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - ec2:*
              - autoscaling:*
              - elasticloadbalancing:*
            Resource: '*'
      - PolicyName: cw-logs
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: '*'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /

  CloudWatchEventDetachEC2FunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaOSEC2ActionFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn:
        Fn::GetAtt:
          - "OSInstanceCWRule"
          - "Arn"

  LambdaKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: !Sub "This is customer managed CMK for Lamda Envs at rest encrytion."
      EnableKeyRotation: true
      Enabled: true
      KeyPolicy:
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"
          -
            Effect: Allow
            Sid: Allow administration of the key
            Principal:
              AWS: !Ref AWS::AccountId
            Action:
              - "kms:*"
            Resource: "*"
      PendingWindowInDays: 7

  LambdaOSEC2ActionFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${EnvironmentPrefix}-EC2OSActionFunction'
      Runtime: python3.7
      Role: !GetAtt EC2ASGLambdaExecutionRole.Arn
      Handler: index.lambda_handler
      MemorySize: 1024
      Timeout: 60
      KmsKeyArn: !GetAtt LambdaKey.Arn
      Environment:
        Variables:
          node_group_arn: !Ref NodeGroup
          target_group_arn: !Ref TargetGroup
      Code:
        ZipFile: !Sub |
          import boto3
          import json
          import os
          import time
          node_group = os.environ['node_group_arn']
          target_group = os.environ['target_group_arn']
          autoscaling = boto3.client('autoscaling')
          elbv2 = boto3.client('elbv2')
          ec2 = boto3.client('ec2')
          def lambda_handler(event, context):
            if 'detail' not in event:
              response = elbv2.describe_target_health(
                TargetGroupArn=target_group,
              )
              target_healths = response['TargetHealthDescriptions']
              for target_health in target_healths:
                if target_health['TargetHealth']['State'] == 'unhealthy' or target_health['TargetHealth']['State'] == 'draining':
                  instanceid = target_health['Target']['Id']
                  instances = []
                  instances.append(instanceid)
                  ec2.stop_instances(InstanceIds=instances)
                  while True:
                    status_response = ec2.describe_instance_status(InstanceIds=instances)
                    if status_response['InstanceStatuses'][0]['InstanceState']['Name'] == 'stopped':
                      time.sleep(5)
                      break
                  ec2.start_instances(InstanceIds=instances)
                  print('started your instances: ' + str(instances))
            else:
              if 'source' in event and event['source'] == "aws.ec2":
                instanceid = event['detail']['instance-id']
                instances = []
                instances.append(instanceid)
                ec2.start_instances(InstanceIds=instances)
                print('started your instances: ' + str(instances))
              else:
                print('Not an EC2 event so skipping.')
      Description: Invoke to start OS instance.

  OSInstanceCWRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Detach Out systems instance when get stopped'
      EventPattern: '{ "source": [ "aws.ec2" ], "detail-type": [ "EC2 Instance State-change Notification" ], "detail": { "state": [ "stopped" ] } }'
      State: 'ENABLED'
      Targets:
      - Id: !Sub '${EnvironmentPrefix}-TakeAction-OutSystems-Instance'
        Arn: !GetAtt LambdaOSEC2ActionFunction.Arn
      - Id: !Sub '${EnvironmentPrefix}-Notify-OutSystems-Instance'
        Arn: !Ref SnsTopicForCWAlerts

  CMKForSNSAndSQS:
    Type: "AWS::KMS::Key"
    Properties:
      Description: !Sub "This is ${EnvironmentPrefix} environment customer managed CMK for SQS and SNS."
      EnableKeyRotation: true
      Enabled: true
      KeyPolicy:
        Statement:
          -
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: "*"
          -
            Effect: Allow
            Principal:
              AWS: !GetAtt NodeInstanceRole.Arn
            Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"
          -
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"
          -
            Effect: Allow
            Sid: Allow administration of the key
            Principal:
              AWS: !Ref AWS::AccountId
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: "*"
      PendingWindowInDays: 7

  SnsTopicForCWAlerts:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${EnvironmentPrefix}-CW-OutSystems-Alerts"
      KmsMasterKeyId:  !Ref CMKForSNSAndSQS
      Subscription:
      - Protocol: email
        Endpoint: !Ref Email

  SnsTopicPolicyForCWAlerts:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref SnsTopicForCWAlerts
      PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Sid: DefaultPolicy
            Principal:
              AWS: "*"
            Action:
            - SNS:GetTopicAttributes
            - SNS:SetTopicAttributes
            - SNS:AddPermission
            - SNS:RemovePermission
            - SNS:DeleteTopic
            - SNS:Subscribe
            - SNS:ListSubscriptionsByTopic
            - SNS:Publish
            - SNS:Receive
            Resource: !Ref SnsTopicForCWAlerts
            Condition:
              StringEquals:
                AWS:SourceOwner: !Ref AWS::AccountId
          - Effect: Allow
            Sid: AllowSNSPublishFromEventBridge
            Action:
            - SNS:Publish
            Resource: !Ref SnsTopicForCWAlerts
            Principal:
              Service: "events.amazonaws.com"

  SNSInvokeFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "LambdaOSEC2ActionFunction"
          - "Arn"
      Action: 'lambda:InvokeFunction'
      Principal: 'sns.amazonaws.com'
      SourceArn: !Ref SnsTopicForCWAlerts

  SnsSubscriptionLambda:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref SnsTopicForCWAlerts
      Protocol: lambda
      Endpoint: !GetAtt LambdaOSEC2ActionFunction.Arn

  UnhealthyHostAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: UnHealthyHostCount
      Namespace: AWS/ApplicationELB
      EvaluationPeriods: 1
      Period: 60
      ActionsEnabled: true
      Statistic: Maximum
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: TargetGroup
          Value: !GetAtt TargetGroup.TargetGroupFullName
        - Name: LoadBalancer
          Value: !GetAtt OSLoadBalancer.LoadBalancerFullName
      AlarmActions:
        - !Ref SnsTopicForCWAlerts
      AlarmDescription: If OutSystems Server goes unhealthy need to detach from ASG
      AlarmName: !Sub "${EnvironmentPrefix}-OutSystems-UnhealthyHostAlarm"

Outputs:
  SubnetIds:
    Description: All subnets in the VPC
    Value: !Join
      - ','
      - - !Ref Subnet04
        - !Ref Subnet05
        - !Ref Subnet06
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-SubnetIds"

  VpcId:
    Description: The VPC Id
    Value: !Ref VPC
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-VpcId"

  AllSubnetIds:
    Description: All subnets in the VPC
    Value: !Join
      - ','
      - - !Ref Subnet01
        - !Ref Subnet02
        - !Ref Subnet03
        - !Ref Subnet04
        - !Ref Subnet05
        - !Ref Subnet06
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-AllSubnetIds"

  ADBSecurityGroup:
    Description: The security group for the node group
    Value: !Ref ADBSecurityGroup
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ADBSecurityGroup"

  OSLoadBalancerCanonicalHostedZoneID:
    Description: OS LoadBalancer Canonical Hosted Zone ID
    Value: !GetAtt OSLoadBalancer.CanonicalHostedZoneID
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-OSLoadBalancerCanonicalHostedZoneID"

  OSLoadBalancerDNSName:
    Description: OS LoadBalancer DNS Name
    Value: !GetAtt OSLoadBalancer.DNSName
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-OSLoadBalancerDNSName"
