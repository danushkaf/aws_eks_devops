AWSTemplateFormatVersion: 2010-09-09
Description: AWS resources for the secrets to be created for Payment service.
Parameters:
  EnvironmentPrefix:
    Type: String 
    AllowedValues:
      - dev
      - qa
      - uat
      - prod
  S3BucketNameContainingLambdaPackages:
    Type: String
    Default: xyz-lambda-packages
    Description: Specify the name of S3 bucket which has all the lambda packages. Note that this bucket should be present already , else an error will be thrown.
  MemorySizeForLambda:
    Type: Number
    Default: 128
    MinValue: 128
    MaxValue: 512
    Description: Provide the memory size in MB for lambda execution
  NumDaysToRetainLambdaExecutionLogs:
    Type: Number
    Default: 7
    MinValue: 1
    MaxValue: 60
  NodeSecurityGroup:
    Type: String
    Description: Input the ARN of the node security group of nodes in EKS cluster for this environment
Resources:
  SFCredentialsSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: This key contains SF credentials- Client id, secret, username, password
      SecretString: "{
        \"ClientId\": \"3MVG9Lf04EwncL7n3J4H3Yp.aa8PYF2gBNkDJ5ltihEMVcGPEFRVSmTkKFFQftCUZfaEZz0PK7AyBqkr1C4pp\",
        \"ClientSecret\": \"941F3090D5A4577C774E59CE2676B5428732D6CE2710AB0C0FA5CFAAE39F52FC\",
        \"UserName\": \"data.integrationmbc@persistent.com.develop\",
        \"Password\": \"Test@Parx2020tYrpVdJVqNTK6WeTUjhto083F\"
      }"
      Name: !Sub '${EnvironmentPrefix}-SF-Credentials'

  SFCredentialsResourcePolicy:
    Type: "AWS::SecretsManager::ResourcePolicy"
    Properties:
      SecretId: !Ref SFCredentialsSecret
      ResourcePolicy: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Ref NodeSecurityGroup
          Action: secretsmanager:GetSecretValue
          Resource: "*"

  MambuCredentialsSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: Mambu username and password to be used in Mambu Lambda Authorizer
      SecretString: "{
        \"UserName\": \"admin\",
        \"Password\": \"secret\"
      }"
      Name: !Sub '${EnvironmentPrefix}-Mambu-Credentials'   

  MambuCredentialsResourcePolicy:
    Type: "AWS::SecretsManager::ResourcePolicy"
    Properties:
      SecretId: !Ref MambuCredentialsSecret
      ResourcePolicy: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Ref NodeSecurityGroup
          Action: secretsmanager:GetSecretValue
          Resource: "*"

  ClearBankCredentialsSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: Clear bank Public key to verify CB signature
      SecretString: "-----BEGIN PUBLIC KEY-----\n
                    MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAlXlE+v8OBUTcHODcpMgC
                    BX6M2+N6BlLC5/y4Z0xD5quS0ry9Wm9NAXD61KHIZHMXTIGjy6NXlovseAmLzL82
                    q88ZjsGOjqVh8NL5Gz7uTqWcARMOVlZiara2/JufQ5XFYv1EA/Y5+7dezPZDZuFd
                    hj7U2lFSV/6wB3uZuDVoD/7Fy0L+yGUt7mgTHU0x91Dvc2m70+Gi/Zqi1xe0GcgD
                    aUp9rLSsUsxaR1CGnANAyZx95OEuDNm4XESc0LDTQbUSqQXFNSIJRX+96HDdP2B2
                    iq+rWCMkOsnIFWn59yJVSVnXIyzqhIQ5SAfpMKPHONh/46OIpPzSgCdsZYhOlDJ5
                    I1Hd5waVAumcw9dSIJPK5P8A4DiC4MNEw52ti4FD7pSD2U/zzMP5vpn2tcobUPDD
                    GYlX9I5DyEn0beBPGWns13QifCdrPbFUzt634x/EAC1SvKoGV1iFrYsV1wcMf0rd
                    yCkXLhrFf7brXBHwcPhLEFl2mlltK/iJtCaNlF6W61mYhuqtc9xQeGrALWFaY+Ki
                    vxIHMQdTu7vZv8K59tHDSJxuq5LpZZ5TaxErsD3YU1nz2L3w5JCaA4iyFx4AOYT7
                    VF0gktU3ziZxpxZzDiuxMQOH8gSvixPGLLVbQp6Pb/LZVkYhMCpEGLJ3peSoj6OH
                    uWgF43Rb5840AyfpvwOZ6vsCAwEAAQ==\n
                    -----END PUBLIC KEY-----"
      Name: !Sub '${EnvironmentPrefix}-CB-PublicKey'

  ClearBankCredentialsResourcePolicy:
    Type: "AWS::SecretsManager::ResourcePolicy"
    Properties:
      SecretId: !Ref ClearBankCredentialsSecret
      ResourcePolicy: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Ref NodeSecurityGroup
          Action: secretsmanager:GetSecretValue
          Resource: "*"    

  ClearBankAuthTokenSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: Authentication token to call Clear Bank APIs 
      SecretString: "MTkzY2RiNzk4NzY4NGYxMTgwZWQwMTNlODM0MjRlMWE=.eyJJbnN0aXR1dGlvbklkIjoiYjcyNzczNWUtOTQyYi00YTQ4LTg0YTktMGIzN2I1YjcxNWFiIiwiTmFtZSI6InFhLW1vbnVtZW50LWlsLXRva2VuIiwiVG9rZW4iOiI1OEIxNURBODI5NEY0NjA4QTE5RTFCNjNCQkRGNEY0QjAzQTg4NDE5RjFFMzRDRDhBQ0MyQUI1NTUxMDBEODI4MEUxM0QyMzU2QTYzNDg4NEJERjA0NEU3NTcxNTcyMzQifQ=="
      Name: !Sub '${EnvironmentPrefix}-clearbank-auth-token'

  ClearBankAuthTokenSecretResourcePolicy:
    Type: "AWS::SecretsManager::ResourcePolicy"
    Properties:
      SecretId: !Ref ClearBankAuthTokenSecret
      ResourcePolicy: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Ref NodeSecurityGroup
          Action: secretsmanager:GetSecretValue
          Resource: "*" 
      
      
#Note currently AWS KMS does not support creating asymmetric keys via CF. 
#We need a asymmetric key for clearbank
  LogGroupMambuAuthorizer:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref NumDaysToRetainLambdaExecutionLogs
      LogGroupName: !Sub '/aws/lambda/${EnvironmentPrefix}-MambuAuthorizer'

  #this policy will be required by all lambdas
  ManagedPolicyLambdaBasicExecution:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: Basic execution policy for all lambdas 
      ManagedPolicyName: !Sub "${EnvironmentPrefix}-lambda-basic-execution-role"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*'
        - Effect: Allow
          Action: logs:CreateLogGroup
          Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'

  RoleForLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${EnvironmentPrefix}-RoleForLambdaExecution"
      #specify which entities/services can assume this role
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
        - Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      # note: the X-ray execution policy has not been attached yet
      ManagedPolicyArns:
        - !Ref ManagedPolicyLambdaBasicExecution
      Policies:
        - 
         PolicyName: !Sub "${EnvironmentPrefix}-MambuCredentialReadPolicy"
         PolicyDocument:
           Version: "2012-10-17"
           Statement:
              - 
                Effect: "Allow"
                Action: "secretsmanager:GetSecretValue"
                Resource: !Ref MambuCredentialsSecret

  LambdaFunctionForMambuAuthorizer:
    Type: "AWS::Lambda::Function"
    Properties:
        Description: "Lambda function to authenticate Mambu credentials"
        Environment:
          Variables:
            Credential_Key: !Ref MambuCredentialsSecret #This lambda will read the secret from this
        FunctionName: !Sub "${EnvironmentPrefix}-MambuBasicAuthorizer"
        Handler: "index.handler"
        Code: 
            S3Bucket: !Ref S3BucketNameContainingLambdaPackages
            S3Key: "MambuBasicAuthorizer.zip"   #this should be a zip file, and should have a index.js within the zip. does not work if index.js is inside a folder in zip
        MemorySize: !Ref MemorySizeForLambda
        Role: !GetAtt RoleForLambdaExecution.Arn
        Runtime: "nodejs12.x"
        Timeout: 3
        TracingConfig: 
            Mode: "PassThrough"

Outputs:
  SFCredentialsSecret:
    Value: !Ref SFCredentialsSecret
    Description: Secret key for Sf 
  MambuCredentialsSecret:
    Value: !Ref MambuCredentialsSecret
  ClearBankCredentialsSecret:
    Value: !Ref ClearBankCredentialsSecret
  LambdaFunctionForMambuAuthorizer:
    Value: !Ref LambdaFunctionForMambuAuthorizer
    Description: Details of the Lambda function for Mambu authorizer.  
  ClearBankAuthTokenSecret:
    Value: !Ref ClearBankAuthTokenSecret    

  